---
title: "forecasting"
format: html
editor: visual
---

```{library(dplyr)}
{r}
library(lubridate)
library(xts)
library(tsoutliers)
library(parallel)
library(doParallel)
library(seastests)
```

Let's clean the data:

```{r}
df<- read.csv("Data/sacrois_complete.csv")
print(unique(df$X3A_CODE))
print(length(unique(df$X3A_CODE))) # 44 species
df$DATE_SEQ <- as.Date(df$DATE_SEQ)
str(df)

df <- df %>%
  rename("Date" = "DATE_SEQ") %>%
  rename("Species" = "X3A_CODE") %>%
  rename("LandingsKG" = "QUANT_POIDS_VIF_MOYENNE") %>%
  rename("LandingsEUR" = "MONTANT_EUROS_MOYENNE")%>%
  filter(Date >= "2001-01-01" & Date < "2024-01-01")
```

We are getting rid of the late 1999 data and beginning of 2024 data.

# Create time series for each species

We will create a `ts_list()` , a list of lists, that contains the time-series of each species of the data set. The frequency is **365** because we are dealing with daily data.

```{r}
# Get the list of unique species
species_list <- unique(df$Species)

# Create a time series for each species
ts_list <- list()
for (species in species_list) {
  # Filter data for the current species
  species_data <- df %>% 
    filter(Species == species) %>% 
    arrange(Date) %>%
    select(Date, LandingsKG)
  
  # Create a ts object
  start_date <- species_data$Date[1]
  end_date <- species_data$Date[nrow(species_data)]
  
  # Create a complete date sequence
  date_seq <- seq(start_date, end_date, by = "day")
  
  # Merge with the complete date sequence
  full_data <- merge(data.frame(Date = date_seq), 
                     species_data, 
                     by = "Date", 
                     all.x = TRUE)
  
  # Fill NA values with 0 (or you might want to use a different method)
  full_data$LandingsKG[is.na(full_data$LandingsKG)] <- 0
  
  # Create a ts object
  ts_object <- ts(full_data$LandingsKG, 
                  start = c(year(start_date), yday(start_date)), 
                  frequency = 365)
  
  # Add the ts object to the list
  ts_list[[paste0("ts_", species)]] <- ts_object
}

# Create a vector with all the TS names
ts_names <- names(ts_list)

# Print the names of the time series
print(ts_names)
```

# Seasonality Detection

We want to apply the `combined_test` on each time series to sea if there is any seasonality. You should note that:

-   **H1** means **seasonality** *(alternative hypothesis)*

-   **H0** means **NO seasonality** *(null hypothesis)*

-   if p \< 0.05 then H1 : seasonality

```{r}
seasonal_combined_test <- c()
seasonal_seasdum <- c()

# Loop over each TS
for (ts_name in names(ts_list)) {
  ts_data <- ts_list[[ts_name]]  # Retrieve data from the time series list
  
  # Apply the combined_test() test to the time series
  ct_res <- combined_test(ts_data)
  
  # Check each p-value and display results if at least one valid H1
  ct_results <- ct_res$stat
  ct_pvals <- ct_res$Pval
  if (ct_results == TRUE) {
    cat("\n")
    cat("\n")
    print(paste0("Combined_test results for the series ", ts_name))
    print(ct_res)
    seasonal_combined_test <- c(seasonal_combined_test, ts_name)
  }
  
  # # Apply the seasdum() test to the time series
  # sd_res <- seasdum(ts_data)
  # 
  # # Check p-value and display results if < 0.05
  # if (sd_res$Pval < 0.05) {
  #   cat("\n")
  #   cat("\n")
  #   print(paste0("Résultats du seasdum pour la série ", ts_name))
  #   print(sd_res)
  #   seasonal_seasdum <- c(seasonal_seasdum, ts_name)
  # }
}

assign("seasonal_combined_test", seasonal_combined_test, envir = .GlobalEnv)
```

[The `combined_test()` function combines three tests:]{.underline}

-   QS test (Quantile Spectral test)

-   QS-R test (QS test on residuals)

-   KW-R test (Kruskal-Wallis test on residuals)

[The function considers a time series as seasonal if:]{.underline}

-   The p-value of QS-R is \< 0.01 OR the p-value of KW-R is \< 0.001

-   OR if both the p-value of QS is \< 0.01 AND the p-value of KW-R is \< 0.01

[Here are the time series that have Seasonality:]{.underline}

```{r}
seasonal_combined_test
```

We need to correct that seasonality among those time series.

```{r}
for (ts_name in seasonal_combined_test) {
  ts_data <- ts_list[[ts_name]]  # Retrieve time series data from the list
  decomp <- stl(ts_data, s.window = 365)  # STL decomposition
  seasonal <- decomp$time.series[, "seasonal"]  # Get the seasonal component
  ts_data_adjusted <- ts_data - seasonal  # Correcting the seasonal component
  ts_list[[ts_name]] <- ts_data_adjusted  # Update the adjusted time series in the list
}
```

Now that this is done, let's check again for any seasonality:

```{r}
seasonal_combined_test <- c()
seasonal_seasdum <- c()

# Loop over each TS
for (ts_name in names(ts_list)) {
  ts_data <- ts_list[[ts_name]]  # Retrieve data from the time series list
  
  # Apply the combined_test() test to the time series
  ct_res <- combined_test(ts_data)
  
  # Check each p-value and display results if at least one valid H1
  ct_results <- ct_res$stat
  ct_pvals <- ct_res$Pval
  if (ct_results == TRUE) {
    cat("\n")
    cat("\n")
    print(paste0("Combined_test results for the series ", ts_name))
    print(ct_res)
    seasonal_combined_test <- c(seasonal_combined_test, ts_name)
  }
}
```

It's weird that we have such a difference between the first two tests and the last one. There are quite the opposite.
